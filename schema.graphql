### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type Country {
  countryCode: String!
  createdAt: DateTime!
  id: String!
  name: String!
  shortName: String!
  updatedAt: DateTime!
}

input Cursor {
  id: String!
}

scalar DateTime

type Episode {
  airDate: DateTime!
  createdAt: DateTime!
  id: String!
  image: String!
  name: String!
  tvShow: TvShow
  updatedAt: DateTime!
}

input EpisodeWhereUniqueInput {
  id: String
}

type FollowStatus {
  isFollower: Boolean
  isFollowing: Boolean
}

enum Gender {
  Female
  Male
  None
}

type GroupMessage {
  createdAt: DateTime!
  groupId: String!
  id: String!
  message: String!
  senderId: String!
  updatedAt: DateTime!
}

type Language {
  createdAt: DateTime!
  id: String!
  name: String!
  nickname: String!
  updatedAt: DateTime!
}

type Message {
  createdAt: DateTime!
  id: String!
  message: String!
  receiverId: String!
  senderId: String!
  updatedAt: DateTime!
}

type Mutation {
  addMessage(buddyId: String!, message: String!): Message
  addQueue(languageId: String!): Language
  editProfile(dob: String!, email: String!, gender: Gender!, name: String!, username: String!): User
  followUser(followingId: String!): User
  requestOtp(countryId: String!, mobile: String!): String
  verifyOtp(countryId: String!, mobile: String!, otp: String!): AuthPayload
}

type Query {
  checkFollowStatus(guestId: String!): FollowStatus
  countries: [Country]
  episodes(tvShowId: String!): [Episode]
  findUserById(userId: String!): User
  getRankings(period: RankingInput!): [Ranking]
  languages: [Language]
  me: User
  messages(buddyId: String!, cursor: Cursor, limit: Int!): [Message]
  searchUsers(keywords: String!): [User]
  tvShows: [TvShow]
}

type Ranking {
  createdAt: DateTime!
  id: String!
  period: String!
  prize: String!
  updatedAt: DateTime!
  user: User!
}

enum RankingInput {
  AllTime
  ThisMonth
  Today
}

type Subscription {
  onMessageAdded: Message
}

type TransactionMeta {
  description: String
  title: String
}

enum TransactionStatus {
  Failed
  Pending
  Success
}

enum TransactionType {
  Deposit
  Withdraw
}

type TvShow {
  about: String
  createdAt: DateTime!
  episodes(after: EpisodeWhereUniqueInput, before: EpisodeWhereUniqueInput, first: Int, last: Int): [Episode!]!
  id: String!
  image: String!
  name: String!
  updatedAt: DateTime!
}

type User {
  admin: Boolean!
  avatar: String
  bio: String
  country: Country!
  countryId: String!
  createdAt: DateTime!
  demo: Boolean!
  dob: String!
  email: String
  fcmToken: String
  follow_status: FollowStatus
  followers(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  following(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  gender: Gender!
  id: String!
  influencer: Boolean!
  instagramUsername: String
  mobile: String!
  name: String
  referralCode: String
  status: Boolean!
  updatedAt: DateTime!
  username: String
  version: String
  wallet: Wallet
}

input UserWhereUniqueInput {
  email: String
  id: String
  mobile: String
  username: String
}

type Wallet {
  balance: Float!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
  walletTransactions(after: WalletTransactionWhereUniqueInput, before: WalletTransactionWhereUniqueInput, first: Int, last: Int): [WalletTransaction!]!
}

type WalletTransaction {
  amount: Float!
  createdAt: DateTime!
  id: String!
  meta: TransactionMeta
  status: TransactionStatus
  type: TransactionType
  updatedAt: DateTime!
  user: User
  userId: String
  wallet: Wallet
  walletId: String
}

input WalletTransactionWhereUniqueInput {
  id: String
}

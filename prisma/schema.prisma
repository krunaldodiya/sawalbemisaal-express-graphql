datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TransactionType {
  Deposit
  Withdraw
}

enum TransactionStatus {
  Success
  Failed
  Pending
}

enum Gender {
  Male
  Female
  None
}

enum RankingInput {
  Today
  ThisMonth
  AllTime
}

enum PollStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum ContestantStatus {
  Eliminated
  Safe
}

model WalletTransaction {
  id Int @id @default(autoincrement())

  amount Float
  type   TransactionType   @default(Deposit)
  status TransactionStatus @default(Pending)
  meta   Json

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user    User? @relation(fields: [user_id], references: [id])
  user_id Int?

  wallet    Wallet? @relation(fields: [wallet_id], references: [id])
  wallet_id Int?

  @@map("wallet_transactions")
}

model Wallet {
  id      Int   @id @default(autoincrement())
  balance Float

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  wallet_transactions WalletTransaction[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("wallet")
}

model Contestant {
  id Int @id @default(autoincrement())

  name  String
  image String

  status ContestantStatus

  tv_show    TvShow? @relation(fields: [tv_show_id], references: [id])
  tv_show_id Int?

  polls Poll[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("contestants")
}

model Poll {
  id Int @id @default(autoincrement())

  question String
  answer   String
  status   PollStatus

  contestants Contestant[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("polls")
}

model GroupMessage {
  id Int @id @default(autoincrement())

  group_id  Int
  sender_id Int
  message   String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("group_messages")
}

model Message {
  id Int @id @default(autoincrement())

  receiver_id Int
  sender_id   Int
  message     String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("messages")
}

model Todo {
  id Int @id @default(autoincrement())

  name  String
  image String
  about String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("todos")
}

model TvShow {
  id Int @id @default(autoincrement())

  name  String
  image String
  about String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  episodes    Episode[]
  contestants Contestant[]

  @@map("tv_shows")
}

model Episode {
  id Int @id @default(autoincrement())

  name  String
  image String

  air_date DateTime

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  tv_show    TvShow? @relation(fields: [tv_show_id], references: [id])
  tv_show_id Int?

  @@map("episodes")
}

model Ranking {
  id Int @id @default(autoincrement())

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  prize  String
  period String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("rankings")
}

model User {
  id Int @id @default(autoincrement())

  mobile             String  @unique
  name               String?
  username           String? @unique
  email              String? @unique
  password           String?
  dob                String  @default("01-01-1990")
  gender             Gender  @default(None)
  avatar             String?
  instagram_username String?
  bio                String?
  admin              Boolean @default(false)
  influencer         Boolean @default(false)
  demo               Boolean @default(false)
  status             Boolean @default(false)

  version       String?
  fcm_token     String?
  referral_code String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  country    Country @relation(fields: [country_id], references: [id])
  country_id Int

  wallet              Wallet?
  wallet_transactions WalletTransaction[]

  following User[] @relation(name: "UserFollows", references: [id])
  followers User[] @relation(name: "UserFollows", references: [id])

  rankings Ranking[]

  @@map("users")
}

model Language {
  id Int @id @default(autoincrement())

  name     String
  nickname String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("languages")
}

model Country {
  id Int @id @default(autoincrement())

  name         String
  short_name   String
  country_code String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  users User[]

  @@map("countries")
}

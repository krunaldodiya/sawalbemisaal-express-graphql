datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TransactionType {
  Deposit
  Withdraw
}

enum TransactionStatus {
  Success
  Failed
  Pending
}

enum Gender {
  Male
  Female
  None
}

enum RankingInput {
  Today
  ThisMonth
  AllTime
}

enum PollStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum ContestantStatus {
  Eliminated
  Safe
}

model WalletTransaction {
  id     String            @id @default(uuid())
  amount Float
  type   TransactionType   @default(Deposit)
  status TransactionStatus @default(Pending)
  meta   Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  wallet   Wallet? @relation(fields: [walletId], references: [id])
  walletId String?
}

model Wallet {
  id      String @id @default(uuid())
  balance Float

  user   User   @relation(fields: [userId], references: [id])
  userId String

  walletTransactions WalletTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Contestant {
  id String @id @default(uuid())

  name  String
  image String

  status ContestantStatus

  tvShow   TvShow? @relation(fields: [tvShowId], references: [id])
  tvShowId String?

  polls Poll[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Poll {
  id String @id @default(uuid())

  question String
  answer   String
  status   PollStatus

  contestants Contestant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model GroupMessage {
  id String @id @default(uuid())

  groupId  String
  senderId String
  message  String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Message {
  id String @id @default(uuid())

  receiverId String
  senderId   String
  message    String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model TvShow {
  id String @id @default(uuid())

  name  String
  image String
  about String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  episodes    Episode[]
  contestants Contestant[]
}

model Episode {
  id String @id @default(uuid())

  name  String
  image String

  airDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tvShow   TvShow? @relation(fields: [tvShowId], references: [id])
  tvShowId String?
}

model Ranking {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  prize  String
  period String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id                String  @id @default(uuid())
  mobile            String  @unique
  name              String?
  username          String? @unique
  email             String? @unique
  password          String?
  dob               String  @default("01-01-1990")
  gender            Gender  @default(None)
  avatar            String?
  instagramUsername String?
  bio               String?
  admin             Boolean @default(false)
  influencer        Boolean @default(false)
  demo              Boolean @default(false)
  status            Boolean @default(false)

  fcmToken     String?
  version      String?
  referralCode String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  countryId String
  country   Country @relation(fields: [countryId], references: [id])

  wallet             Wallet?
  walletTransactions WalletTransaction[]

  following User[] @relation(name: "UserFollows", references: [id])
  followers User[] @relation(name: "UserFollows", references: [id])

  rankings Ranking[]
}

model Language {
  id       String @id @default(uuid())
  name     String
  nickname String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Country {
  id          String @id @default(uuid())
  name        String
  shortName   String
  countryCode String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User[]
}
